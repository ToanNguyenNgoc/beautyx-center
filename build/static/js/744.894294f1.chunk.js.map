{"version":3,"file":"static/js/744.894294f1.chunk.js","mappings":"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","sources":["app/modules/apps/user-management/users-list/core/_requests.ts","app/modules/apps/user-management/users-list/core/QueryRequestProvider.tsx","app/modules/apps/user-management/users-list/core/QueryResponseProvider.tsx","app/modules/apps/user-management/users-list/core/ListViewProvider.tsx","app/modules/apps/user-management/users-list/components/header/UsersListFilter.tsx","app/modules/apps/user-management/users-list/components/header/UserListToolbar.tsx","app/modules/apps/user-management/users-list/components/header/UsersListGrouping.tsx","app/modules/apps/user-management/users-list/components/header/UsersListSearchComponent.tsx","app/modules/apps/user-management/users-list/components/header/UsersListHeader.tsx","app/modules/apps/user-management/users-list/table/columns/CustomHeaderColumn.tsx","app/modules/apps/user-management/users-list/table/columns/CustomRow.tsx","app/modules/apps/user-management/users-list/table/columns/UserInfoCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserLastLoginCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserTwoStepsCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserActionsCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserSelectionCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserCustomHeader.tsx","app/modules/apps/user-management/users-list/table/columns/UserSelectionHeader.tsx","app/modules/apps/user-management/users-list/table/columns/_columns.tsx","app/modules/apps/user-management/users-list/components/loading/UsersListLoading.tsx","app/modules/apps/user-management/users-list/components/pagination/UsersListPagination.tsx","app/modules/apps/user-management/users-list/table/UsersTable.tsx","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModalHeader.tsx","app/modules/apps/user-management/users-list/core/_models.ts","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModalForm.tsx","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModalFormWrapper.tsx","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModal.tsx","app/modules/apps/user-management/users-list/UsersList.tsx","app/modules/apps/user-management/UsersPage.tsx"],"sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\nimport {ID, Response} from '../../../../../../_metronic/helpers'\r\nimport {User, UsersQueryResponse} from './_models'\r\n\r\nconst API_URL = process.env.REACT_APP_THEME_API_URL\r\nconst USER_URL = `${API_URL}/user`\r\nconst GET_USERS_URL = `${API_URL}/users/query`\r\n\r\nconst getUsers = (query: string): Promise<UsersQueryResponse> => {\r\n  return axios\r\n    .get(`${GET_USERS_URL}?${query}`)\r\n    .then((d: AxiosResponse<UsersQueryResponse>) => d.data)\r\n}\r\n\r\nconst getUserById = (id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .get(`${USER_URL}/${id}`)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst createUser = (user: User): Promise<User | undefined> => {\r\n  return axios\r\n    .put(USER_URL, user)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst updateUser = (user: User): Promise<User | undefined> => {\r\n  return axios\r\n    .post(`${USER_URL}/${user.id}`, user)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst deleteUser = (userId: ID): Promise<void> => {\r\n  return axios.delete(`${USER_URL}/${userId}`).then(() => {})\r\n}\r\n\r\nconst deleteSelectedUsers = (userIds: Array<ID>): Promise<void> => {\r\n  const requests = userIds.map((id) => axios.delete(`${USER_URL}/${id}`))\r\n  return axios.all(requests).then(() => {})\r\n}\r\n\r\nexport {getUsers, deleteUser, deleteSelectedUsers, getUserById, createUser, updateUser}\r\n","import {FC, useState, createContext, useContext} from 'react'\r\nimport {\r\n  QueryState,\r\n  QueryRequestContextProps,\r\n  initialQueryRequest,\r\n  WithChildren,\r\n} from '../../../../../../_metronic/helpers'\r\n\r\nconst QueryRequestContext = createContext<QueryRequestContextProps>(initialQueryRequest)\r\n\r\nconst QueryRequestProvider: FC<WithChildren> = ({children}) => {\r\n  const [state, setState] = useState<QueryState>(initialQueryRequest.state)\r\n\r\n  const updateState = (updates: Partial<QueryState>) => {\r\n    const updatedState = {...state, ...updates} as QueryState\r\n    setState(updatedState)\r\n  }\r\n\r\n  return (\r\n    <QueryRequestContext.Provider value={{state, updateState}}>\r\n      {children}\r\n    </QueryRequestContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryRequest = () => useContext(QueryRequestContext)\r\nexport {QueryRequestProvider, useQueryRequest}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {FC, useContext, useState, useEffect, useMemo} from 'react'\r\nimport {useQuery} from 'react-query'\r\nimport {\r\n  createResponseContext,\r\n  initialQueryResponse,\r\n  initialQueryState,\r\n  PaginationState,\r\n  QUERIES,\r\n  stringifyRequestQuery,\r\n  WithChildren,\r\n} from '../../../../../../_metronic/helpers'\r\nimport {getUsers} from './_requests'\r\nimport {User} from './_models'\r\nimport {useQueryRequest} from './QueryRequestProvider'\r\n\r\nconst QueryResponseContext = createResponseContext<User>(initialQueryResponse)\r\nconst QueryResponseProvider: FC<WithChildren> = ({children}) => {\r\n  const {state} = useQueryRequest()\r\n  const [query, setQuery] = useState<string>(stringifyRequestQuery(state))\r\n  const updatedQuery = useMemo(() => stringifyRequestQuery(state), [state])\r\n\r\n  useEffect(() => {\r\n    if (query !== updatedQuery) {\r\n      setQuery(updatedQuery)\r\n    }\r\n  }, [updatedQuery])\r\n\r\n  const {\r\n    isFetching,\r\n    refetch,\r\n    data: response,\r\n  } = useQuery(\r\n    `${QUERIES.USERS_LIST}-${query}`,\r\n    () => {\r\n      return getUsers(query)\r\n    },\r\n    {cacheTime: 0, keepPreviousData: true, refetchOnWindowFocus: false}\r\n  )\r\n\r\n  return (\r\n    <QueryResponseContext.Provider value={{isLoading: isFetching, refetch, response, query}}>\r\n      {children}\r\n    </QueryResponseContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryResponse = () => useContext(QueryResponseContext)\r\n\r\nconst useQueryResponseData = () => {\r\n  const {response} = useQueryResponse()\r\n  if (!response) {\r\n    return []\r\n  }\r\n\r\n  return response?.data || []\r\n}\r\n\r\nconst useQueryResponsePagination = () => {\r\n  const defaultPaginationState: PaginationState = {\r\n    links: [],\r\n    ...initialQueryState,\r\n  }\r\n\r\n  const {response} = useQueryResponse()\r\n  if (!response || !response.payload || !response.payload.pagination) {\r\n    return defaultPaginationState\r\n  }\r\n\r\n  return response.payload.pagination\r\n}\r\n\r\nconst useQueryResponseLoading = (): boolean => {\r\n  const {isLoading} = useQueryResponse()\r\n  return isLoading\r\n}\r\n\r\nexport {\r\n  QueryResponseProvider,\r\n  useQueryResponse,\r\n  useQueryResponseData,\r\n  useQueryResponsePagination,\r\n  useQueryResponseLoading,\r\n}\r\n","import {FC, useState, createContext, useContext, useMemo} from 'react'\r\nimport {\r\n  ID,\r\n  calculatedGroupingIsDisabled,\r\n  calculateIsAllDataSelected,\r\n  groupingOnSelect,\r\n  initialListView,\r\n  ListViewContextProps,\r\n  groupingOnSelectAll,\r\n  WithChildren,\r\n} from '../../../../../../_metronic/helpers'\r\nimport {useQueryResponse, useQueryResponseData} from './QueryResponseProvider'\r\n\r\nconst ListViewContext = createContext<ListViewContextProps>(initialListView)\r\n\r\nconst ListViewProvider: FC<WithChildren> = ({children}) => {\r\n  const [selected, setSelected] = useState<Array<ID>>(initialListView.selected)\r\n  const [itemIdForUpdate, setItemIdForUpdate] = useState<ID>(initialListView.itemIdForUpdate)\r\n  const {isLoading} = useQueryResponse()\r\n  const data = useQueryResponseData()\r\n  const disabled = useMemo(() => calculatedGroupingIsDisabled(isLoading, data), [isLoading, data])\r\n  const isAllSelected = useMemo(() => calculateIsAllDataSelected(data, selected), [data, selected])\r\n\r\n  return (\r\n    <ListViewContext.Provider\r\n      value={{\r\n        selected,\r\n        itemIdForUpdate,\r\n        setItemIdForUpdate,\r\n        disabled,\r\n        isAllSelected,\r\n        onSelect: (id: ID) => {\r\n          groupingOnSelect(id, selected, setSelected)\r\n        },\r\n        onSelectAll: () => {\r\n          groupingOnSelectAll(isAllSelected, setSelected, data)\r\n        },\r\n        clearSelected: () => {\r\n          setSelected([])\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </ListViewContext.Provider>\r\n  )\r\n}\r\n\r\nconst useListView = () => useContext(ListViewContext)\r\n\r\nexport {ListViewProvider, useListView}\r\n","import {useEffect, useState} from 'react'\r\nimport {MenuComponent} from '../../../../../../../_metronic/assets/ts/components'\r\nimport {initialQueryState, KTSVG} from '../../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\n\r\nconst UsersListFilter = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const {isLoading} = useQueryResponse()\r\n  const [role, setRole] = useState<string | undefined>()\r\n  const [lastLogin, setLastLogin] = useState<string | undefined>()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const resetData = () => {\r\n    updateState({filter: undefined, ...initialQueryState})\r\n  }\r\n\r\n  const filterData = () => {\r\n    updateState({\r\n      filter: {role, last_login: lastLogin},\r\n      ...initialQueryState,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* begin::Filter Button */}\r\n      <button\r\n        disabled={isLoading}\r\n        type='button'\r\n        className='btn btn-light-primary me-3'\r\n        data-kt-menu-trigger='click'\r\n        data-kt-menu-placement='bottom-end'\r\n      >\r\n        <KTSVG path='/media/icons/duotune/general/gen031.svg' className='svg-icon-2' />\r\n        Filter\r\n      </button>\r\n      {/* end::Filter Button */}\r\n      {/* begin::SubMenu */}\r\n      <div className='menu menu-sub menu-sub-dropdown w-300px w-md-325px' data-kt-menu='true'>\r\n        {/* begin::Header */}\r\n        <div className='px-7 py-5'>\r\n          <div className='fs-5 text-dark fw-bolder'>Filter Options</div>\r\n        </div>\r\n        {/* end::Header */}\r\n\r\n        {/* begin::Separator */}\r\n        <div className='separator border-gray-200'></div>\r\n        {/* end::Separator */}\r\n\r\n        {/* begin::Content */}\r\n        <div className='px-7 py-5' data-kt-user-table-filter='form'>\r\n          {/* begin::Input group */}\r\n          <div className='mb-10'>\r\n            <label className='form-label fs-6 fw-bold'>Role:</label>\r\n            <select\r\n              className='form-select form-select-solid fw-bolder'\r\n              data-kt-select2='true'\r\n              data-placeholder='Select option'\r\n              data-allow-clear='true'\r\n              data-kt-user-table-filter='role'\r\n              data-hide-search='true'\r\n              onChange={(e) => setRole(e.target.value)}\r\n              value={role}\r\n            >\r\n              <option value=''></option>\r\n              <option value='Administrator'>Administrator</option>\r\n              <option value='Analyst'>Analyst</option>\r\n              <option value='Developer'>Developer</option>\r\n              <option value='Support'>Support</option>\r\n              <option value='Trial'>Trial</option>\r\n            </select>\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Input group */}\r\n          <div className='mb-10'>\r\n            <label className='form-label fs-6 fw-bold'>Last login:</label>\r\n            <select\r\n              className='form-select form-select-solid fw-bolder'\r\n              data-kt-select2='true'\r\n              data-placeholder='Select option'\r\n              data-allow-clear='true'\r\n              data-kt-user-table-filter='two-step'\r\n              data-hide-search='true'\r\n              onChange={(e) => setLastLogin(e.target.value)}\r\n              value={lastLogin}\r\n            >\r\n              <option value=''></option>\r\n              <option value='Yesterday'>Yesterday</option>\r\n              <option value='20 mins ago'>20 mins ago</option>\r\n              <option value='5 hours ago'>5 hours ago</option>\r\n              <option value='2 days ago'>2 days ago</option>\r\n            </select>\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Actions */}\r\n          <div className='d-flex justify-content-end'>\r\n            <button\r\n              type='button'\r\n              disabled={isLoading}\r\n              onClick={filterData}\r\n              className='btn btn-light btn-active-light-primary fw-bold me-2 px-6'\r\n              data-kt-menu-dismiss='true'\r\n              data-kt-user-table-filter='reset'\r\n            >\r\n              Reset\r\n            </button>\r\n            <button\r\n              disabled={isLoading}\r\n              type='button'\r\n              onClick={resetData}\r\n              className='btn btn-primary fw-bold px-6'\r\n              data-kt-menu-dismiss='true'\r\n              data-kt-user-table-filter='filter'\r\n            >\r\n              Apply\r\n            </button>\r\n          </div>\r\n          {/* end::Actions */}\r\n        </div>\r\n        {/* end::Content */}\r\n      </div>\r\n      {/* end::SubMenu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UsersListFilter}\r\n","import {KTSVG} from '../../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListFilter} from './UsersListFilter'\r\n\r\nconst UsersListToolbar = () => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const openAddUserModal = () => {\r\n    setItemIdForUpdate(null)\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end' data-kt-user-table-toolbar='base'>\r\n      <UsersListFilter />\r\n\r\n      {/* begin::Export */}\r\n      <button type='button' className='btn btn-light-primary me-3'>\r\n        <KTSVG path='/media/icons/duotune/arrows/arr078.svg' className='svg-icon-2' />\r\n        Export\r\n      </button>\r\n      {/* end::Export */}\r\n\r\n      {/* begin::Add user */}\r\n      <button type='button' className='btn btn-primary' onClick={openAddUserModal}>\r\n        <KTSVG path='/media/icons/duotune/arrows/arr075.svg' className='svg-icon-2' />\r\n        Add User\r\n      </button>\r\n      {/* end::Add user */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListToolbar}\r\n","import {useQueryClient, useMutation} from 'react-query'\r\nimport {QUERIES} from '../../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteSelectedUsers} from '../../core/_requests'\r\n\r\nconst UsersListGrouping = () => {\r\n  const {selected, clearSelected} = useListView()\r\n  const queryClient = useQueryClient()\r\n  const {query} = useQueryResponse()\r\n\r\n  const deleteSelectedItems = useMutation(() => deleteSelectedUsers(selected), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n      clearSelected()\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end align-items-center'>\r\n      <div className='fw-bolder me-5'>\r\n        <span className='me-2'>{selected.length}</span> Selected\r\n      </div>\r\n\r\n      <button\r\n        type='button'\r\n        className='btn btn-danger'\r\n        onClick={async () => await deleteSelectedItems.mutateAsync()}\r\n      >\r\n        Delete Selected\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListGrouping}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {useState, useEffect} from 'react'\r\nimport {initialQueryState, KTSVG, useDebounce} from '../../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\n\r\nconst UsersListSearchComponent = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const [searchTerm, setSearchTerm] = useState<string>('')\r\n  // Debounce search term so that it only gives us latest value ...\r\n  // ... if searchTerm has not been updated within last 500ms.\r\n  // The goal is to only have the API call fire when user stops typing ...\r\n  // ... so that we aren't hitting our API rapidly.\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 150)\r\n  // Effect for API call\r\n  useEffect(\r\n    () => {\r\n      if (debouncedSearchTerm !== undefined && searchTerm !== undefined) {\r\n        updateState({search: debouncedSearchTerm, ...initialQueryState})\r\n      }\r\n    },\r\n    [debouncedSearchTerm] // Only call effect if debounced search term changes\r\n    // More details about useDebounce: https://usehooks.com/useDebounce/\r\n  )\r\n\r\n  return (\r\n    <div className='card-title'>\r\n      {/* begin::Search */}\r\n      <div className='d-flex align-items-center position-relative my-1'>\r\n        <KTSVG\r\n          path='/media/icons/duotune/general/gen021.svg'\r\n          className='svg-icon-1 position-absolute ms-6'\r\n        />\r\n        <input\r\n          type='text'\r\n          data-kt-user-table-filter='search'\r\n          className='form-control form-control-solid w-250px ps-14'\r\n          placeholder='Search user'\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n      </div>\r\n      {/* end::Search */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListSearchComponent}\r\n","import {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListToolbar} from './UserListToolbar'\r\nimport {UsersListGrouping} from './UsersListGrouping'\r\nimport {UsersListSearchComponent} from './UsersListSearchComponent'\r\n\r\nconst UsersListHeader = () => {\r\n  const {selected} = useListView()\r\n  return (\r\n    <div className='card-header border-0 pt-6'>\r\n      <UsersListSearchComponent />\r\n      {/* begin::Card toolbar */}\r\n      <div className='card-toolbar'>\r\n        {/* begin::Group actions */}\r\n        {selected.length > 0 ? <UsersListGrouping /> : <UsersListToolbar />}\r\n        {/* end::Group actions */}\r\n      </div>\r\n      {/* end::Card toolbar */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListHeader}\r\n","// @ts-nocheck\r\nimport {FC} from 'react'\r\nimport {ColumnInstance} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  column: ColumnInstance<User>\r\n}\r\n\r\nconst CustomHeaderColumn: FC<Props> = ({column}) => (\r\n  <>\r\n    {column.Header && typeof column.Header === 'string' ? (\r\n      <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n    ) : (\r\n      column.render('Header')\r\n    )}\r\n  </>\r\n)\r\n\r\nexport {CustomHeaderColumn}\r\n","// @ts-nocheck\r\nimport clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {Row} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  row: Row<User>\r\n}\r\n\r\nconst CustomRow: FC<Props> = ({row}) => (\r\n  <tr {...row.getRowProps()}>\r\n    {row.cells.map((cell) => {\r\n      return (\r\n        <td\r\n          {...cell.getCellProps()}\r\n          className={clsx({'text-end min-w-100px': cell.column.id === 'actions'})}\r\n        >\r\n          {cell.render('Cell')}\r\n        </td>\r\n      )\r\n    })}\r\n  </tr>\r\n)\r\n\r\nexport {CustomRow}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {toAbsoluteUrl} from '../../../../../../../_metronic/helpers'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  user: User\r\n}\r\n\r\nconst UserInfoCell: FC<Props> = ({user}) => (\r\n  <div className='d-flex align-items-center'>\r\n    {/* begin:: Avatar */}\r\n    <div className='symbol symbol-circle symbol-50px overflow-hidden me-3'>\r\n      <a href='#'>\r\n        {user.avatar ? (\r\n          <div className='symbol-label'>\r\n            <img src={toAbsoluteUrl(`/media/${user.avatar}`)} alt={user.name} className='w-100' />\r\n          </div>\r\n        ) : (\r\n          <div\r\n            className={clsx(\r\n              'symbol-label fs-3',\r\n              `bg-light-${user.initials?.state}`,\r\n              `text-${user.initials?.state}`\r\n            )}\r\n          >\r\n            {user.initials?.label}\r\n          </div>\r\n        )}\r\n      </a>\r\n    </div>\r\n    <div className='d-flex flex-column'>\r\n      <a href='#' className='text-gray-800 text-hover-primary mb-1'>\r\n        {user.name}\r\n      </a>\r\n      <span>{user.email}</span>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport {UserInfoCell}\r\n","import {FC} from 'react'\r\n\r\ntype Props = {\r\n  last_login?: string\r\n}\r\n\r\nconst UserLastLoginCell: FC<Props> = ({last_login}) => (\r\n  <div className='badge badge-light fw-bolder'>{last_login}</div>\r\n)\r\n\r\nexport {UserLastLoginCell}\r\n","import {FC} from 'react'\r\n\r\ntype Props = {\r\n  two_steps?: boolean\r\n}\r\n\r\nconst UserTwoStepsCell: FC<Props> = ({two_steps}) => (\r\n  <> {two_steps && <div className='badge badge-light-success fw-bolder'>Enabled</div>}</>\r\n)\r\n\r\nexport {UserTwoStepsCell}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport {FC, useEffect} from 'react'\r\nimport {useMutation, useQueryClient} from 'react-query'\r\nimport {MenuComponent} from '../../../../../../../_metronic/assets/ts/components'\r\nimport {ID, KTSVG, QUERIES} from '../../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteUser} from '../../core/_requests'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserActionsCell: FC<Props> = ({id}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {query} = useQueryResponse()\r\n  const queryClient = useQueryClient()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const openEditModal = () => {\r\n    setItemIdForUpdate(id)\r\n  }\r\n\r\n  const deleteItem = useMutation(() => deleteUser(id), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n    },\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <a\r\n        href='#'\r\n        className='btn btn-light btn-active-light-primary btn-sm'\r\n        data-kt-menu-trigger='click'\r\n        data-kt-menu-placement='bottom-end'\r\n      >\r\n        Actions\r\n        <KTSVG path='/media/icons/duotune/arrows/arr072.svg' className='svg-icon-5 m-0' />\r\n      </a>\r\n      {/* begin::Menu */}\r\n      <div\r\n        className='menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-bold fs-7 w-125px py-4'\r\n        data-kt-menu='true'\r\n      >\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item px-3'>\r\n          <a className='menu-link px-3' onClick={openEditModal}>\r\n            Edit\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item px-3'>\r\n          <a\r\n            className='menu-link px-3'\r\n            data-kt-users-table-filter='delete_row'\r\n            onClick={async () => await deleteItem.mutateAsync()}\r\n          >\r\n            Delete\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n      </div>\r\n      {/* end::Menu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserActionsCell}\r\n","import {FC, useMemo} from 'react'\r\nimport {ID} from '../../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserSelectionCell: FC<Props> = ({id}) => {\r\n  const {selected, onSelect} = useListView()\r\n  const isSelected = useMemo(() => selected.includes(id), [id, selected])\r\n  return (\r\n    <div className='form-check form-check-custom form-check-solid'>\r\n      <input\r\n        className='form-check-input'\r\n        type='checkbox'\r\n        data-kt-check={isSelected}\r\n        data-kt-check-target='#kt_table_users .form-check-input'\r\n        checked={isSelected}\r\n        onChange={() => onSelect(id)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserSelectionCell}\r\n","import clsx from 'clsx'\r\nimport {FC, PropsWithChildren, useMemo} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {initialQueryState} from '../../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  className?: string\r\n  title?: string\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\nconst UserCustomHeader: FC<Props> = ({className, title, tableProps}) => {\r\n  const id = tableProps.column.id\r\n  const {state, updateState} = useQueryRequest()\r\n\r\n  const isSelectedForSorting = useMemo(() => {\r\n    return state.sort && state.sort === id\r\n  }, [state, id])\r\n  const order: 'asc' | 'desc' | undefined = useMemo(() => state.order, [state])\r\n\r\n  const sortColumn = () => {\r\n    // avoid sorting for these columns\r\n    if (id === 'actions' || id === 'selection') {\r\n      return\r\n    }\r\n\r\n    if (!isSelectedForSorting) {\r\n      // enable sort asc\r\n      updateState({sort: id, order: 'asc', ...initialQueryState})\r\n      return\r\n    }\r\n\r\n    if (isSelectedForSorting && order !== undefined) {\r\n      if (order === 'asc') {\r\n        // enable sort desc\r\n        updateState({sort: id, order: 'desc', ...initialQueryState})\r\n        return\r\n      }\r\n\r\n      // disable sort\r\n      updateState({sort: undefined, order: undefined, ...initialQueryState})\r\n    }\r\n  }\r\n\r\n  return (\r\n    <th\r\n      {...tableProps.column.getHeaderProps()}\r\n      className={clsx(\r\n        className,\r\n        isSelectedForSorting && order !== undefined && `table-sort-${order}`\r\n      )}\r\n      style={{cursor: 'pointer'}}\r\n      onClick={sortColumn}\r\n    >\r\n      {title}\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserCustomHeader}\r\n","import {FC, PropsWithChildren} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\n\r\nconst UserSelectionHeader: FC<Props> = ({tableProps}) => {\r\n  const {isAllSelected, onSelectAll} = useListView()\r\n  return (\r\n    <th {...tableProps.column.getHeaderProps()} className='w-10px pe-2'>\r\n      <div className='form-check form-check-sm form-check-custom form-check-solid me-3'>\r\n        <input\r\n          className='form-check-input'\r\n          type='checkbox'\r\n          data-kt-check={isAllSelected}\r\n          data-kt-check-target='#kt_table_users .form-check-input'\r\n          checked={isAllSelected}\r\n          onChange={onSelectAll}\r\n        />\r\n      </div>\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserSelectionHeader}\r\n","// @ts-nocheck\r\nimport {Column} from 'react-table'\r\nimport {UserInfoCell} from './UserInfoCell'\r\nimport {UserLastLoginCell} from './UserLastLoginCell'\r\nimport {UserTwoStepsCell} from './UserTwoStepsCell'\r\nimport {UserActionsCell} from './UserActionsCell'\r\nimport {UserSelectionCell} from './UserSelectionCell'\r\nimport {UserCustomHeader} from './UserCustomHeader'\r\nimport {UserSelectionHeader} from './UserSelectionHeader'\r\nimport {User} from '../../core/_models'\r\n\r\nconst usersColumns: ReadonlyArray<Column<User>> = [\r\n  {\r\n    Header: (props) => <UserSelectionHeader tableProps={props} />,\r\n    id: 'selection',\r\n    Cell: ({...props}) => <UserSelectionCell id={props.data[props.row.index].id} />,\r\n  },\r\n  {\r\n    Header: (props) => <UserCustomHeader tableProps={props} title='Name' className='min-w-125px' />,\r\n    id: 'name',\r\n    Cell: ({...props}) => <UserInfoCell user={props.data[props.row.index]} />,\r\n  },\r\n  {\r\n    Header: (props) => <UserCustomHeader tableProps={props} title='Role' className='min-w-125px' />,\r\n    accessor: 'role',\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Last login' className='min-w-125px' />\r\n    ),\r\n    id: 'last_login',\r\n    Cell: ({...props}) => <UserLastLoginCell last_login={props.data[props.row.index].last_login} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Two steps' className='min-w-125px' />\r\n    ),\r\n    id: 'two_steps',\r\n    Cell: ({...props}) => <UserTwoStepsCell two_steps={props.data[props.row.index].two_steps} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Joined day' className='min-w-125px' />\r\n    ),\r\n    accessor: 'joined_day',\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Actions' className='text-end min-w-100px' />\r\n    ),\r\n    id: 'actions',\r\n    Cell: ({...props}) => <UserActionsCell id={props.data[props.row.index].id} />,\r\n  },\r\n]\r\n\r\nexport {usersColumns}\r\n","const UsersListLoading = () => {\r\n  const styles = {\r\n    borderRadius: '0.475rem',\r\n    boxShadow: '0 0 50px 0 rgb(82 63 105 / 15%)',\r\n    backgroundColor: '#fff',\r\n    color: '#7e8299',\r\n    fontWeight: '500',\r\n    margin: '0',\r\n    width: 'auto',\r\n    padding: '1rem 2rem',\r\n    top: 'calc(50% - 2rem)',\r\n    left: 'calc(50% - 4rem)',\r\n  }\r\n\r\n  return <div style={{...styles, position: 'absolute', textAlign: 'center'}}>Processing...</div>\r\n}\r\n\r\nexport {UsersListLoading}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {useQueryResponseLoading, useQueryResponsePagination} from '../../core/QueryResponseProvider'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\n\r\nconst mappedLabel = (label: string): string => {\r\n  if (label === '&laquo; Previous') {\r\n    return 'Previous'\r\n  }\r\n\r\n  if (label === 'Next &raquo;') {\r\n    return 'Next'\r\n  }\r\n\r\n  return label\r\n}\r\n\r\nconst UsersListPagination = () => {\r\n  const pagination = useQueryResponsePagination()\r\n  const isLoading = useQueryResponseLoading()\r\n  const {updateState} = useQueryRequest()\r\n  const updatePage = (page: number | null) => {\r\n    if (!page || isLoading || pagination.page === page) {\r\n      return\r\n    }\r\n\r\n    updateState({page, items_per_page: pagination.items_per_page || 10})\r\n  }\r\n\r\n  return (\r\n    <div className='row'>\r\n      <div className='col-sm-12 col-md-5 d-flex align-items-center justify-content-center justify-content-md-start'></div>\r\n      <div className='col-sm-12 col-md-7 d-flex align-items-center justify-content-center justify-content-md-end'>\r\n        <div id='kt_table_users_paginate'>\r\n          <ul className='pagination'>\r\n            {pagination.links\r\n              ?.map((link) => {\r\n                return {...link, label: mappedLabel(link.label)}\r\n              })\r\n              .map((link) => (\r\n                <li\r\n                  key={link.label}\r\n                  className={clsx('page-item', {\r\n                    active: pagination.page === link.page,\r\n                    disabled: isLoading,\r\n                    previous: link.label === 'Previous',\r\n                    next: link.label === 'Next',\r\n                  })}\r\n                >\r\n                  <a\r\n                    className={clsx('page-link', {\r\n                      'page-text': link.label === 'Previous' || link.label === 'Next',\r\n                      'me-5': link.label === 'Previous',\r\n                    })}\r\n                    onClick={() => updatePage(link.page)}\r\n                    style={{cursor: 'pointer'}}\r\n                  >\r\n                    {mappedLabel(link.label)}\r\n                  </a>\r\n                </li>\r\n              ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListPagination}\r\n","import {useMemo} from 'react'\r\nimport {useTable, ColumnInstance, Row} from 'react-table'\r\nimport {CustomHeaderColumn} from '../table/columns/CustomHeaderColumn'\r\nimport {CustomRow} from '../table/columns/CustomRow'\r\nimport {useQueryResponseData, useQueryResponseLoading} from '../core/QueryResponseProvider'\r\nimport {usersColumns} from './columns/_columns'\r\nimport {User} from '../core/_models'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {UsersListPagination} from '../components/pagination/UsersListPagination'\r\nimport {KTCardBody} from '../../../../../../_metronic/helpers'\r\n\r\nconst UsersTable = () => {\r\n  const users = useQueryResponseData()\r\n  const isLoading = useQueryResponseLoading()\r\n  const data = useMemo(() => users, [users])\r\n  const columns = useMemo(() => usersColumns, [])\r\n  const {getTableProps, getTableBodyProps, headers, rows, prepareRow} = useTable({\r\n    columns,\r\n    data,\r\n  })\r\n\r\n  return (\r\n    <KTCardBody className='py-4'>\r\n      <div className='table-responsive'>\r\n        <table\r\n          id='kt_table_users'\r\n          className='table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer'\r\n          {...getTableProps()}\r\n        >\r\n          <thead>\r\n            <tr className='text-start text-muted fw-bolder fs-7 text-uppercase gs-0'>\r\n              {headers.map((column: ColumnInstance<User>) => (\r\n                <CustomHeaderColumn key={column.id} column={column} />\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody className='text-gray-600 fw-bold' {...getTableBodyProps()}>\r\n            {rows.length > 0 ? (\r\n              rows.map((row: Row<User>, i) => {\r\n                prepareRow(row)\r\n                return <CustomRow row={row} key={`row-${i}-${row.id}`} />\r\n              })\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={7}>\r\n                  <div className='d-flex text-center w-100 align-content-center justify-content-center'>\r\n                    No matching records found\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <UsersListPagination />\r\n      {isLoading && <UsersListLoading />}\r\n    </KTCardBody>\r\n  )\r\n}\r\n\r\nexport {UsersTable}\r\n","import {KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\n\r\nconst UserEditModalHeader = () => {\r\n  const {setItemIdForUpdate} = useListView()\r\n\r\n  return (\r\n    <div className='modal-header'>\r\n      {/* begin::Modal title */}\r\n      <h2 className='fw-bolder'>Add User</h2>\r\n      {/* end::Modal title */}\r\n\r\n      {/* begin::Close */}\r\n      <div\r\n        className='btn btn-icon btn-sm btn-active-icon-primary'\r\n        data-kt-users-modal-action='close'\r\n        onClick={() => setItemIdForUpdate(undefined)}\r\n        style={{cursor: 'pointer'}}\r\n      >\r\n        <KTSVG path='/media/icons/duotune/arrows/arr061.svg' className='svg-icon-1' />\r\n      </div>\r\n      {/* end::Close */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserEditModalHeader}\r\n","import {ID, Response} from '../../../../../../_metronic/helpers'\r\nexport type User = {\r\n  id?: ID\r\n  name?: string\r\n  avatar?: string\r\n  email?: string\r\n  position?: string\r\n  role?: string\r\n  last_login?: string\r\n  two_steps?: boolean\r\n  joined_day?: string\r\n  online?: boolean\r\n  initials?: {\r\n    label: string\r\n    state: string\r\n  }\r\n}\r\n\r\nexport type UsersQueryResponse = Response<Array<User>>\r\n\r\nexport const initialUser: User = {\r\n  avatar: 'avatars/300-6.jpg',\r\n  position: 'Art Director',\r\n  role: 'Administrator',\r\n  name: '',\r\n  email: '',\r\n}\r\n","import {FC, useState} from 'react'\r\nimport * as Yup from 'yup'\r\nimport {useFormik} from 'formik'\r\nimport {isNotEmpty, toAbsoluteUrl} from '../../../../../../_metronic/helpers'\r\nimport {initialUser, User} from '../core/_models'\r\nimport clsx from 'clsx'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {createUser, updateUser} from '../core/_requests'\r\nimport {useQueryResponse} from '../core/QueryResponseProvider'\r\n\r\ntype Props = {\r\n  isUserLoading: boolean\r\n  user: User\r\n}\r\n\r\nconst editUserSchema = Yup.object().shape({\r\n  email: Yup.string()\r\n    .email('Wrong email format')\r\n    .min(3, 'Minimum 3 symbols')\r\n    .max(50, 'Maximum 50 symbols')\r\n    .required('Email is required'),\r\n  name: Yup.string()\r\n    .min(3, 'Minimum 3 symbols')\r\n    .max(50, 'Maximum 50 symbols')\r\n    .required('Name is required'),\r\n})\r\n\r\nconst UserEditModalForm: FC<Props> = ({user, isUserLoading}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {refetch} = useQueryResponse()\r\n\r\n  const [userForEdit] = useState<User>({\r\n    ...user,\r\n    avatar: user.avatar || initialUser.avatar,\r\n    role: user.role || initialUser.role,\r\n    position: user.position || initialUser.position,\r\n    name: user.name || initialUser.name,\r\n    email: user.email || initialUser.email,\r\n  })\r\n\r\n  const cancel = (withRefresh?: boolean) => {\r\n    if (withRefresh) {\r\n      refetch()\r\n    }\r\n    setItemIdForUpdate(undefined)\r\n  }\r\n\r\n  const blankImg = toAbsoluteUrl('/media/svg/avatars/blank.svg')\r\n  const userAvatarImg = toAbsoluteUrl(`/media/${userForEdit.avatar}`)\r\n\r\n  const formik = useFormik({\r\n    initialValues: userForEdit,\r\n    validationSchema: editUserSchema,\r\n    onSubmit: async (values, {setSubmitting}) => {\r\n      setSubmitting(true)\r\n      try {\r\n        if (isNotEmpty(values.id)) {\r\n          await updateUser(values)\r\n        } else {\r\n          await createUser(values)\r\n        }\r\n      } catch (ex) {\r\n        console.error(ex)\r\n      } finally {\r\n        setSubmitting(true)\r\n        cancel(true)\r\n      }\r\n    },\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <form id='kt_modal_add_user_form' className='form' onSubmit={formik.handleSubmit} noValidate>\r\n        {/* begin::Scroll */}\r\n        <div\r\n          className='d-flex flex-column scroll-y me-n7 pe-7'\r\n          id='kt_modal_add_user_scroll'\r\n          data-kt-scroll='true'\r\n          data-kt-scroll-activate='{default: false, lg: true}'\r\n          data-kt-scroll-max-height='auto'\r\n          data-kt-scroll-dependencies='#kt_modal_add_user_header'\r\n          data-kt-scroll-wrappers='#kt_modal_add_user_scroll'\r\n          data-kt-scroll-offset='300px'\r\n        >\r\n          {/* begin::Input group */}\r\n          <div className='fv-row mb-7'>\r\n            {/* begin::Label */}\r\n            <label className='d-block fw-bold fs-6 mb-5'>Avatar</label>\r\n            {/* end::Label */}\r\n\r\n            {/* begin::Image input */}\r\n            <div\r\n              className='image-input image-input-outline'\r\n              data-kt-image-input='true'\r\n              style={{backgroundImage: `url('${blankImg}')`}}\r\n            >\r\n              {/* begin::Preview existing avatar */}\r\n              <div\r\n                className='image-input-wrapper w-125px h-125px'\r\n                style={{backgroundImage: `url('${userAvatarImg}')`}}\r\n              ></div>\r\n              {/* end::Preview existing avatar */}\r\n\r\n              {/* begin::Label */}\r\n              {/* <label\r\n              className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\r\n              data-kt-image-input-action='change'\r\n              data-bs-toggle='tooltip'\r\n              title='Change avatar'\r\n            >\r\n              <i className='bi bi-pencil-fill fs-7'></i>\r\n\r\n              <input type='file' name='avatar' accept='.png, .jpg, .jpeg' />\r\n              <input type='hidden' name='avatar_remove' />\r\n            </label> */}\r\n              {/* end::Label */}\r\n\r\n              {/* begin::Cancel */}\r\n              {/* <span\r\n              className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\r\n              data-kt-image-input-action='cancel'\r\n              data-bs-toggle='tooltip'\r\n              title='Cancel avatar'\r\n            >\r\n              <i className='bi bi-x fs-2'></i>\r\n            </span> */}\r\n              {/* end::Cancel */}\r\n\r\n              {/* begin::Remove */}\r\n              {/* <span\r\n              className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\r\n              data-kt-image-input-action='remove'\r\n              data-bs-toggle='tooltip'\r\n              title='Remove avatar'\r\n            >\r\n              <i className='bi bi-x fs-2'></i>\r\n            </span> */}\r\n              {/* end::Remove */}\r\n            </div>\r\n            {/* end::Image input */}\r\n\r\n            {/* begin::Hint */}\r\n            {/* <div className='form-text'>Allowed file types: png, jpg, jpeg.</div> */}\r\n            {/* end::Hint */}\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Input group */}\r\n          <div className='fv-row mb-7'>\r\n            {/* begin::Label */}\r\n            <label className='required fw-bold fs-6 mb-2'>Full Name</label>\r\n            {/* end::Label */}\r\n\r\n            {/* begin::Input */}\r\n            <input\r\n              placeholder='Full name'\r\n              {...formik.getFieldProps('name')}\r\n              type='text'\r\n              name='name'\r\n              className={clsx(\r\n                'form-control form-control-solid mb-3 mb-lg-0',\r\n                {'is-invalid': formik.touched.name && formik.errors.name},\r\n                {\r\n                  'is-valid': formik.touched.name && !formik.errors.name,\r\n                }\r\n              )}\r\n              autoComplete='off'\r\n              disabled={formik.isSubmitting || isUserLoading}\r\n            />\r\n            {formik.touched.name && formik.errors.name && (\r\n              <div className='fv-plugins-message-container'>\r\n                <div className='fv-help-block'>\r\n                  <span role='alert'>{formik.errors.name}</span>\r\n                </div>\r\n              </div>\r\n            )}\r\n            {/* end::Input */}\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Input group */}\r\n          <div className='fv-row mb-7'>\r\n            {/* begin::Label */}\r\n            <label className='required fw-bold fs-6 mb-2'>Email</label>\r\n            {/* end::Label */}\r\n\r\n            {/* begin::Input */}\r\n            <input\r\n              placeholder='Email'\r\n              {...formik.getFieldProps('email')}\r\n              className={clsx(\r\n                'form-control form-control-solid mb-3 mb-lg-0',\r\n                {'is-invalid': formik.touched.email && formik.errors.email},\r\n                {\r\n                  'is-valid': formik.touched.email && !formik.errors.email,\r\n                }\r\n              )}\r\n              type='email'\r\n              name='email'\r\n              autoComplete='off'\r\n              disabled={formik.isSubmitting || isUserLoading}\r\n            />\r\n            {/* end::Input */}\r\n            {formik.touched.email && formik.errors.email && (\r\n              <div className='fv-plugins-message-container'>\r\n                <span role='alert'>{formik.errors.email}</span>\r\n              </div>\r\n            )}\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Input group */}\r\n          <div className='mb-7'>\r\n            {/* begin::Label */}\r\n            <label className='required fw-bold fs-6 mb-5'>Role</label>\r\n            {/* end::Label */}\r\n            {/* begin::Roles */}\r\n            {/* begin::Input row */}\r\n            <div className='d-flex fv-row'>\r\n              {/* begin::Radio */}\r\n              <div className='form-check form-check-custom form-check-solid'>\r\n                {/* begin::Input */}\r\n                <input\r\n                  className='form-check-input me-3'\r\n                  {...formik.getFieldProps('role')}\r\n                  name='role'\r\n                  type='radio'\r\n                  value='Administrator'\r\n                  id='kt_modal_update_role_option_0'\r\n                  checked={formik.values.role === 'Administrator'}\r\n                  disabled={formik.isSubmitting || isUserLoading}\r\n                />\r\n\r\n                {/* end::Input */}\r\n                {/* begin::Label */}\r\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_0'>\r\n                  <div className='fw-bolder text-gray-800'>Administrator</div>\r\n                  <div className='text-gray-600'>\r\n                    Best for business owners and company administrators\r\n                  </div>\r\n                </label>\r\n                {/* end::Label */}\r\n              </div>\r\n              {/* end::Radio */}\r\n            </div>\r\n            {/* end::Input row */}\r\n            <div className='separator separator-dashed my-5'></div>\r\n            {/* begin::Input row */}\r\n            <div className='d-flex fv-row'>\r\n              {/* begin::Radio */}\r\n              <div className='form-check form-check-custom form-check-solid'>\r\n                {/* begin::Input */}\r\n                <input\r\n                  className='form-check-input me-3'\r\n                  {...formik.getFieldProps('role')}\r\n                  name='role'\r\n                  type='radio'\r\n                  value='Developer'\r\n                  id='kt_modal_update_role_option_1'\r\n                  checked={formik.values.role === 'Developer'}\r\n                  disabled={formik.isSubmitting || isUserLoading}\r\n                />\r\n                {/* end::Input */}\r\n                {/* begin::Label */}\r\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_1'>\r\n                  <div className='fw-bolder text-gray-800'>Developer</div>\r\n                  <div className='text-gray-600'>\r\n                    Best for developers or people primarily using the API\r\n                  </div>\r\n                </label>\r\n                {/* end::Label */}\r\n              </div>\r\n              {/* end::Radio */}\r\n            </div>\r\n            {/* end::Input row */}\r\n            <div className='separator separator-dashed my-5'></div>\r\n            {/* begin::Input row */}\r\n            <div className='d-flex fv-row'>\r\n              {/* begin::Radio */}\r\n              <div className='form-check form-check-custom form-check-solid'>\r\n                {/* begin::Input */}\r\n                <input\r\n                  className='form-check-input me-3'\r\n                  {...formik.getFieldProps('role')}\r\n                  name='role'\r\n                  type='radio'\r\n                  value='Analyst'\r\n                  id='kt_modal_update_role_option_2'\r\n                  checked={formik.values.role === 'Analyst'}\r\n                  disabled={formik.isSubmitting || isUserLoading}\r\n                />\r\n\r\n                {/* end::Input */}\r\n                {/* begin::Label */}\r\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_2'>\r\n                  <div className='fw-bolder text-gray-800'>Analyst</div>\r\n                  <div className='text-gray-600'>\r\n                    Best for people who need full access to analytics data, but don't need to update\r\n                    business settings\r\n                  </div>\r\n                </label>\r\n                {/* end::Label */}\r\n              </div>\r\n              {/* end::Radio */}\r\n            </div>\r\n            {/* end::Input row */}\r\n            <div className='separator separator-dashed my-5'></div>\r\n            {/* begin::Input row */}\r\n            <div className='d-flex fv-row'>\r\n              {/* begin::Radio */}\r\n              <div className='form-check form-check-custom form-check-solid'>\r\n                {/* begin::Input */}\r\n                <input\r\n                  className='form-check-input me-3'\r\n                  {...formik.getFieldProps('role')}\r\n                  name='role'\r\n                  type='radio'\r\n                  value='Support'\r\n                  id='kt_modal_update_role_option_3'\r\n                  checked={formik.values.role === 'Support'}\r\n                  disabled={formik.isSubmitting || isUserLoading}\r\n                />\r\n                {/* end::Input */}\r\n                {/* begin::Label */}\r\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_3'>\r\n                  <div className='fw-bolder text-gray-800'>Support</div>\r\n                  <div className='text-gray-600'>\r\n                    Best for employees who regularly refund payments and respond to disputes\r\n                  </div>\r\n                </label>\r\n                {/* end::Label */}\r\n              </div>\r\n              {/* end::Radio */}\r\n            </div>\r\n            {/* end::Input row */}\r\n            <div className='separator separator-dashed my-5'></div>\r\n            {/* begin::Input row */}\r\n            <div className='d-flex fv-row'>\r\n              {/* begin::Radio */}\r\n              <div className='form-check form-check-custom form-check-solid'>\r\n                {/* begin::Input */}\r\n                <input\r\n                  className='form-check-input me-3'\r\n                  {...formik.getFieldProps('role')}\r\n                  name='role'\r\n                  type='radio'\r\n                  id='kt_modal_update_role_option_4'\r\n                  value='Trial'\r\n                  checked={formik.values.role === 'Trial'}\r\n                  disabled={formik.isSubmitting || isUserLoading}\r\n                />\r\n                {/* end::Input */}\r\n                {/* begin::Label */}\r\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_4'>\r\n                  <div className='fw-bolder text-gray-800'>Trial</div>\r\n                  <div className='text-gray-600'>\r\n                    Best for people who need to preview content data, but don't need to make any\r\n                    updates\r\n                  </div>\r\n                </label>\r\n                {/* end::Label */}\r\n              </div>\r\n              {/* end::Radio */}\r\n            </div>\r\n            {/* end::Input row */}\r\n            {/* end::Roles */}\r\n          </div>\r\n          {/* end::Input group */}\r\n        </div>\r\n        {/* end::Scroll */}\r\n\r\n        {/* begin::Actions */}\r\n        <div className='text-center pt-15'>\r\n          <button\r\n            type='reset'\r\n            onClick={() => cancel()}\r\n            className='btn btn-light me-3'\r\n            data-kt-users-modal-action='cancel'\r\n            disabled={formik.isSubmitting || isUserLoading}\r\n          >\r\n            Discard\r\n          </button>\r\n\r\n          <button\r\n            type='submit'\r\n            className='btn btn-primary'\r\n            data-kt-users-modal-action='submit'\r\n            disabled={isUserLoading || formik.isSubmitting || !formik.isValid || !formik.touched}\r\n          >\r\n            <span className='indicator-label'>Submit</span>\r\n            {(formik.isSubmitting || isUserLoading) && (\r\n              <span className='indicator-progress'>\r\n                Please wait...{' '}\r\n                <span className='spinner-border spinner-border-sm align-middle ms-2'></span>\r\n              </span>\r\n            )}\r\n          </button>\r\n        </div>\r\n        {/* end::Actions */}\r\n      </form>\r\n      {(formik.isSubmitting || isUserLoading) && <UsersListLoading />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModalForm}\r\n","import {useQuery} from 'react-query'\r\nimport {UserEditModalForm} from './UserEditModalForm'\r\nimport {isNotEmpty, QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {getUserById} from '../core/_requests'\r\n\r\nconst UserEditModalFormWrapper = () => {\r\n  const {itemIdForUpdate, setItemIdForUpdate} = useListView()\r\n  const enabledQuery: boolean = isNotEmpty(itemIdForUpdate)\r\n  const {\r\n    isLoading,\r\n    data: user,\r\n    error,\r\n  } = useQuery(\r\n    `${QUERIES.USERS_LIST}-user-${itemIdForUpdate}`,\r\n    () => {\r\n      return getUserById(itemIdForUpdate)\r\n    },\r\n    {\r\n      cacheTime: 0,\r\n      enabled: enabledQuery,\r\n      onError: (err) => {\r\n        setItemIdForUpdate(undefined)\r\n        console.error(err)\r\n      },\r\n    }\r\n  )\r\n\r\n  if (!itemIdForUpdate) {\r\n    return <UserEditModalForm isUserLoading={isLoading} user={{id: undefined}} />\r\n  }\r\n\r\n  if (!isLoading && !error && user) {\r\n    return <UserEditModalForm isUserLoading={isLoading} user={user} />\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport {UserEditModalFormWrapper}\r\n","import {useEffect} from 'react'\r\nimport {UserEditModalHeader} from './UserEditModalHeader'\r\nimport {UserEditModalFormWrapper} from './UserEditModalFormWrapper'\r\n\r\nconst UserEditModal = () => {\r\n  useEffect(() => {\r\n    document.body.classList.add('modal-open')\r\n    return () => {\r\n      document.body.classList.remove('modal-open')\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className='modal fade show d-block'\r\n        id='kt_modal_add_user'\r\n        role='dialog'\r\n        tabIndex={-1}\r\n        aria-modal='true'\r\n      >\r\n        {/* begin::Modal dialog */}\r\n        <div className='modal-dialog modal-dialog-centered mw-650px'>\r\n          {/* begin::Modal content */}\r\n          <div className='modal-content'>\r\n            <UserEditModalHeader />\r\n            {/* begin::Modal body */}\r\n            <div className='modal-body scroll-y mx-5 mx-xl-15 my-7'>\r\n              <UserEditModalFormWrapper />\r\n            </div>\r\n            {/* end::Modal body */}\r\n          </div>\r\n          {/* end::Modal content */}\r\n        </div>\r\n        {/* end::Modal dialog */}\r\n      </div>\r\n      {/* begin::Modal Backdrop */}\r\n      <div className='modal-backdrop fade show'></div>\r\n      {/* end::Modal Backdrop */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModal}\r\n","import {ListViewProvider, useListView} from './core/ListViewProvider'\r\nimport {QueryRequestProvider} from './core/QueryRequestProvider'\r\nimport {QueryResponseProvider} from './core/QueryResponseProvider'\r\nimport {UsersListHeader} from './components/header/UsersListHeader'\r\nimport {UsersTable} from './table/UsersTable'\r\nimport {UserEditModal} from './user-edit-modal/UserEditModal'\r\nimport {KTCard} from '../../../../../_metronic/helpers'\r\n\r\nconst UsersList = () => {\r\n  const {itemIdForUpdate} = useListView()\r\n  return (\r\n    <>\r\n      <KTCard>\r\n        <UsersListHeader />\r\n        <UsersTable />\r\n      </KTCard>\r\n      {itemIdForUpdate !== undefined && <UserEditModal />}\r\n    </>\r\n  )\r\n}\r\n\r\nconst UsersListWrapper = () => (\r\n  <QueryRequestProvider>\r\n    <QueryResponseProvider>\r\n      <ListViewProvider>\r\n        <UsersList />\r\n      </ListViewProvider>\r\n    </QueryResponseProvider>\r\n  </QueryRequestProvider>\r\n)\r\n\r\nexport {UsersListWrapper}\r\n","import {Route, Routes, Outlet, Navigate} from 'react-router-dom'\r\nimport {PageLink, PageTitle} from '../../../../_metronic/layout/core'\r\nimport {UsersListWrapper} from './users-list/UsersList'\r\n\r\nconst usersBreadcrumbs: Array<PageLink> = [\r\n  {\r\n    title: 'User Management',\r\n    path: '/apps/user-management/users',\r\n    isSeparator: false,\r\n    isActive: false,\r\n  },\r\n  {\r\n    title: '',\r\n    path: '',\r\n    isSeparator: true,\r\n    isActive: false,\r\n  },\r\n]\r\n\r\nconst UsersPage = () => {\r\n  return (\r\n    <Routes>\r\n      <Route element={<Outlet />}>\r\n        <Route\r\n          path='users'\r\n          element={\r\n            <>\r\n              <PageTitle breadcrumbs={usersBreadcrumbs}>Users list</PageTitle>\r\n              <UsersListWrapper />\r\n            </>\r\n          }\r\n        />\r\n      </Route>\r\n      <Route index element={<Navigate to='/apps/user-management/users' />} />\r\n    </Routes>\r\n  )\r\n}\r\n\r\nexport default UsersPage\r\n"],"names":["USER_URL","QueryRequestContext","createContext","initialQueryRequest","QueryRequestProvider","_ref","children","state","setState","useState","_jsx","Provider","value","updateState","updates","updatedState","useQueryRequest","useContext","QueryResponseContext","createResponseContext","initialQueryResponse","QueryResponseProvider","query","setQuery","stringifyRequestQuery","updatedQuery","useMemo","useEffect","isFetching","refetch","data","response","useQuery","QUERIES","USERS_LIST","axios","then","d","getUsers","cacheTime","keepPreviousData","refetchOnWindowFocus","isLoading","useQueryResponse","useQueryResponseData","useQueryResponseLoading","ListViewContext","initialListView","ListViewProvider","selected","setSelected","itemIdForUpdate","setItemIdForUpdate","disabled","calculatedGroupingIsDisabled","isAllSelected","calculateIsAllDataSelected","onSelect","id","groupingOnSelect","onSelectAll","groupingOnSelectAll","clearSelected","useListView","UsersListFilter","role","setRole","lastLogin","setLastLogin","MenuComponent","reinitialization","_jsxs","_Fragment","type","className","KTSVG","path","onChange","e","target","onClick","filterData","filter","last_login","initialQueryState","resetData","undefined","UsersListToolbar","openAddUserModal","UsersListGrouping","queryClient","useQueryClient","deleteSelectedItems","useMutation","userIds","requests","map","deleteSelectedUsers","onSuccess","invalidateQueries","length","async","mutateAsync","UsersListSearchComponent","searchTerm","setSearchTerm","debouncedSearchTerm","useDebounce","search","placeholder","UsersListHeader","CustomHeaderColumn","column","Header","getHeaderProps","render","CustomRow","row","getRowProps","cells","cell","getCellProps","clsx","UserInfoCell","_user$initials","_user$initials2","_user$initials3","user","href","avatar","src","toAbsoluteUrl","alt","name","initials","label","email","UserLastLoginCell","UserTwoStepsCell","two_steps","UserActionsCell","deleteItem","deleteUser","userId","openEditModal","UserSelectionCell","isSelected","includes","checked","UserCustomHeader","title","tableProps","isSelectedForSorting","sort","order","style","cursor","sortColumn","UserSelectionHeader","usersColumns","props","Cell","index","_ref2","accessor","_ref3","_ref4","_ref5","UsersListLoading","borderRadius","boxShadow","backgroundColor","color","fontWeight","margin","width","padding","top","left","position","textAlign","mappedLabel","UsersListPagination","_pagination$links","pagination","useQueryResponsePagination","defaultPaginationState","links","payload","link","active","page","previous","next","items_per_page","UsersTable","users","columns","getTableProps","getTableBodyProps","headers","rows","prepareRow","useTable","KTCardBody","i","colSpan","UserEditModalHeader","initialUser","editUserSchema","Yup","shape","min","max","required","UserEditModalForm","isUserLoading","userForEdit","cancel","withRefresh","blankImg","userAvatarImg","formik","useFormik","initialValues","validationSchema","onSubmit","values","setSubmitting","isNotEmpty","updateUser","createUser","ex","console","error","handleSubmit","noValidate","backgroundImage","getFieldProps","touched","errors","autoComplete","isSubmitting","htmlFor","isValid","UserEditModalFormWrapper","enabledQuery","enabled","onError","err","UserEditModal","document","body","classList","add","remove","tabIndex","UsersList","KTCard","UsersListWrapper","usersBreadcrumbs","isSeparator","isActive","UsersPage","Routes","Route","element","Outlet","PageTitle","breadcrumbs","Navigate","to"],"sourceRoot":""}