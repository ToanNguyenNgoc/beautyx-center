{"version":3,"file":"static/js/653.ebc25ad7.chunk.js","mappings":"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","sources":["app/pages/banners/module/BannerAdd.tsx","components/TitlePage/index.tsx"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport TitlePage from 'components/TitlePage';\nimport { useLocation, useParams } from 'react-router-dom';\nimport '../style.scss';\nimport 'react-quill/dist/quill.snow.css';\nimport { useMutation, useQuery } from 'react-query';\nimport { QR_KEY } from 'common';\nimport { bannerApi } from 'app/api';\nimport { useFormik } from 'formik';\nimport { FileUploader } from 'react-drag-drop-files';\nimport { BANNERS_TYPE, BANNER_TYPE, FILE_IMG_TYPE, testLinkYoutube } from 'app/util';\nimport { IMGS } from '_metronic/assets/imgs/imgs';\nimport { CircularProgress, FormControl, LinearProgress, MenuItem, Select, TextField } from '@mui/material';\nimport { useMessage, usePostMedia } from 'app/hooks';\nimport { PLAT_FORM_ARR } from 'app/util';\nimport { DesktopDatePicker } from '@mui/x-date-pickers';\nimport moment from 'moment';\nimport { ChangeEvent, Dispatch, FC, SetStateAction, useState } from 'react';\nimport ReactQuill from 'react-quill';\nimport { IBanner, IOrganization } from 'app/interface';\nimport { LoadingButton } from '@mui/lab';\nimport * as Yup from \"yup\"\nimport { AxiosError } from 'axios';\nimport { AppSnack, SelectionOrg } from 'components';\n\nfunction BannerAdd() {\n    // useVerifyRoute()\n    const location: any = useLocation()\n    const prevPriority: number = location.state ?? 0\n    const params: any = useParams();\n    const { resultLoad, noti, onCloseNoti } = useMessage()\n    const [origin, setOrigin] = useState<IOrganization>()\n    const { isLoading, handlePostMedia } = usePostMedia()\n    const { mutate, isLoading: isPosting } = useMutation({\n        mutationFn: (body: any) => params.id ? bannerApi.putBanner(params.id, body) : bannerApi.postBanner(body),\n        onSuccess: () => {\n            resultLoad({\n                message: `${params.id ? 'Cập nhật' : 'Tạo mới'} banner thành công`,\n                color: 'success'\n            })\n        },\n        onError: (errors: any) => {\n            const err = errors as AxiosError\n            resultLoad({\n                color: 'error',\n                message: `Có lỗi xảy ra. Mã lỗi ${err?.request?.status}`\n            })\n        }\n    })\n    let formik = useFormik({\n        initialValues: {\n            // priority: \"\",\n            imageURL: \"\",\n            name: \"\",\n            platform: \"\",\n            expires_at: \"\",\n            type: \"\",\n            htmlTemplate: \"\",\n            url: \"\"\n        },\n        validationSchema: Yup.object({\n            imageURL: Yup.string().required(\"Upload hình của banner\"),\n            name: Yup.string().required(\"Nhập tên của Banner\"),\n            // expires_at: Yup.string().required(\"Nhập ngày hết hạn Banner\"),\n            type: Yup.string().required('Chọn loại Banner'),\n        }),\n        onSubmit: (values) => {\n            mutate({\n                ...values,\n                origin_id: origin?.id,\n                priority: params.id ? undefined : prevPriority + 1\n            })\n        }\n    })\n    const { data, refetch, isFetching } = useQuery({\n        queryKey: [QR_KEY.BANNER, params.id],\n        queryFn: () => bannerApi.getDetailById(params.id),\n        enabled: params.id ? true : false,\n        onSuccess: (data) => {\n            const banner = data.context\n            formik.setFieldValue('name', banner.name)\n            formik.setFieldValue('imageURL', banner.imageURL)\n            formik.setFieldValue('platform', banner.platform ?? '')\n            formik.setFieldValue('expires_at', banner.expires_at)\n            formik.setFieldValue('type', banner.type ?? '')\n            formik.setFieldValue('url', banner.url ?? '')\n            formik.setFieldValue('htmlTemplate', banner.htmlTemplate ?? '')\n            // formik.setFieldValue('priority', banner.priority ?? '')\n        },\n    })\n    const handleChangeMedia = (file: File) => {\n        formik.setFieldValue('imageURL', '')\n        const eF: any = {\n            target: {\n                files: [file]\n            }\n        }\n        handlePostMedia({\n            e: eF,\n            callBack(data) {\n                console.log(data)\n                formik.setFieldValue('imageURL', data[0]?.original_url ?? '')\n            },\n            version: 'myspa',\n            resetOriginalResult:true\n        })\n    }\n    return (\n        <>\n            <AppSnack\n                severity={noti.color}\n                message={noti.message}\n                open={noti.openAlert}\n                close={onCloseNoti}\n            />\n            <TitlePage title={params.id ? 'Cập nhật banner' : 'Tạo mới banner'} />\n            <div className='post d-flex flex-column-fluid' id=\"kt_post\">\n                <div className=\"container cus-container\">\n                    <form className='banner-form' autoComplete='off' onSubmit={formik.handleSubmit}>\n                        <div className=\"required form-label\">Banner</div>\n                        <div className=\"drag-banner\">\n                            <FileUploader\n                                className=\"form-input-file\"\n                                style={{ width: '100%' }}\n                                multiple={false}\n                                handleChange={handleChangeMedia}\n                                name=\"file\"\n                                types={FILE_IMG_TYPE}\n                                children={\n                                    <div className='banner-form__img'>\n                                        <img src={formik.values.imageURL === \"\" ? IMGS.imgPlaceHolder : formik.values.imageURL} alt=\"\" className=\"image-value\" />\n                                        {\n                                            isLoading &&\n                                            <div className=\"placeholder\">\n                                                <span>\n                                                    Đang tải lên\n                                                </span>\n                                                <LinearProgress />\n                                            </div>\n                                        }\n                                        {\n                                            formik.values.imageURL === \"\" &&\n                                            <div className=\"placeholder\">\n                                                <span>\n                                                    Kéo thả hình ảnh vào đây hoặc Click để chọn hình ảnh\n                                                </span>\n                                            </div>\n                                        }\n                                    </div>\n                                }\n                            />\n                        </div>\n                        <input\n                            value={formik.values.imageURL}\n                            onChange={formik.handleChange}\n                            type=\"text\"\n                            name=\"imageURL\"\n                            className=\"form-control form-control-solid mt-4 mb-4\"\n                            placeholder=\"Hoặc link hình ảnh....\"\n                        />\n                        {formik.errors.imageURL && formik.touched.imageURL && (\n                            <span className='text-danger'>\n                                {formik.errors.imageURL}\n                            </span>\n                        )}\n                        <div className=\"input-form\">\n                            <div className=\"input-form__wrap\">\n                                <label className=\"required form-label\">\n                                    Tên Banners\n                                </label>\n                                <input\n                                    value={formik.values.name}\n                                    onChange={formik.handleChange}\n                                    type=\"text\"\n                                    name=\"name\"\n                                    className=\"form-control form-control-solid\"\n                                    placeholder=\"Tên Banner\"\n                                />\n                                {formik.errors.name && formik.touched.name && (\n                                    <span className='text-danger'>\n                                        {formik.errors.name}\n                                    </span>\n                                )}\n                            </div>\n                            <div className=\"row mt-8\">\n                                <div className=\"col\">\n                                    <label className=\"filter-row_label\">Nền tảng</label>\n                                    <FormControl size=\"small\">\n                                        <Select\n                                            labelId=\"demo-simple-select-label\"\n                                            id=\"demo-simple-select\"\n                                            value={formik.values.platform}\n                                            onChange={(e) => formik.setFieldValue('platform', e.target.value)}\n                                        >\n                                            <MenuItem value=\"\">\n                                                <em>Tất cả</em>\n                                            </MenuItem>\n                                            {\n                                                PLAT_FORM_ARR.map(item => (\n                                                    <MenuItem key={item} value={item}>{item}</MenuItem>\n                                                ))\n                                            }\n                                        </Select>\n                                    </FormControl>\n                                </div>\n                                <div className=\"col\">\n                                    <label className=\"filter-row_label\">Ngày hết hạn</label>\n                                    <DesktopDatePicker\n                                        disablePast={true}\n                                        inputFormat=\"dd/MM/yyyy\"\n                                        value={formik.values.expires_at && new Date(formik.values.expires_at)}\n                                        onChange={(e) => formik.setFieldValue('expires_at', moment(e).format('YYYY-MM-DD HH:mm:ss'))}\n                                        renderInput={(params: any) => <TextField {...params} />}\n                                    />\n                                    {formik.errors.expires_at && formik.touched.expires_at && (\n                                        <span className='text-danger'>\n                                            {formik.errors.expires_at}\n                                        </span>\n                                    )}\n                                </div>\n                                <div className=\"col\">\n                                    <label className=\"filter-row_label\">Loại banner cho</label>\n                                    <FormControl size=\"small\">\n                                        <Select\n                                            labelId=\"demo-simple-select-label\"\n                                            id=\"demo-simple-select\"\n                                            value={formik.values.type}\n                                            onChange={(e) => formik.setFieldValue('type', e.target.value)}\n                                        >\n                                            {\n                                                BANNERS_TYPE.map(item => (\n                                                    <MenuItem key={item.type} value={item.type}>{item.title}</MenuItem>\n                                                ))\n                                            }\n                                        </Select>\n                                    </FormControl>\n                                    {formik.errors.type && formik.touched.type && (\n                                        <span className='text-danger'>\n                                            {formik.errors.type}\n                                        </span>\n                                    )}\n                                </div>\n                            </div>\n                            <RenderElement formik={formik} origin={origin} setOrigin={setOrigin} banner={data?.context} />\n                        </div>\n                        <div className=\"d-flex justify-content-end mt-6\">\n                            {\n                                params.id &&\n                                <LoadingButton\n                                    style={{ marginRight: '8px' }}\n                                    loading={isFetching}\n                                    onClick={() => refetch()}\n                                    size='large' color='primary' type='button' variant='contained'\n                                >\n                                    Khôi phục\n                                </LoadingButton>\n                            }\n                            <LoadingButton loading={isPosting} size='large' color='success' type='submit' variant='contained' >\n                                {params.id ? 'Lưu thay đổi' : 'Tạo mới banner'}\n                            </LoadingButton>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default BannerAdd;\ninterface RenderElementProps {\n    formik: any,\n    origin: IOrganization | undefined\n    setOrigin: Dispatch<SetStateAction<IOrganization | undefined>>\n    banner: IBanner | undefined\n}\nconst RenderElement: FC<RenderElementProps> = ({ formik, origin, setOrigin, banner }) => {\n    const type = formik.values.type\n    //[handle type === \"VIDEO\"]\n    const { isLoading: isLoadingVideo, handlePostMedia } = usePostMedia()\n    const handleChangeVideo = (e: ChangeEvent<HTMLInputElement>) => {\n        formik.setFieldValue('url', '')\n        handlePostMedia({\n            e,\n            callBack(data) {\n                formik.setFieldValue('url', data[0]?.original_url)\n            },\n            version: 'api.beautyx'\n        })\n    }\n    const { isYoutubeLink, embedLink } = testLinkYoutube(formik.values.url)\n\n    return (\n        <div className='mt-8'>\n            {\n                (type === BANNER_TYPE.SEARCH_RESULT || type === BANNER_TYPE.WEB || type === BANNER_TYPE.POPUP || type === BANNER_TYPE.DISCOUNT) &&\n                <div className=\"col\">\n                    <label className=\"filter-row_label\">Đường dẫn</label>\n                    <input\n                        name='url' onChange={formik.handleChange}\n                        type=\"text\" className=\"form-control form-control-solid\"\n                        value={formik.values.url}\n                        placeholder='Đường dẫn URL...'\n                    />\n                </div>\n            }\n            {\n                (type === BANNER_TYPE.HTML) &&\n                <div className=\"col\">\n                    <label className=\"filter-row_label\">Nhập content</label>\n                    <ReactQuill value={formik.values.htmlTemplate} onChange={(e) => formik.setFieldValue('htmlTemplate', e)} />\n                </div>\n            }\n            {\n                type === BANNER_TYPE.ORGANIZATION &&\n                <SelectionOrg\n                    organization_id={banner?.origin_id}\n                    origin={origin}\n                    setOrigin={setOrigin}\n                />\n            }\n            {\n                type === BANNER_TYPE.VIDEO &&\n                <div className=\"col col-video\">\n                    <label className=\"filter-row_label\">Upload video</label>\n                    <div className=\"drag-video\">\n                        <input\n                            name=\"url\"\n                            onChange={formik.handleChange}\n                            value={formik.values.url}\n                            type=\"text\" placeholder='Hoặc link video'\n                            className=\"form-control form-control-solid\"\n                        />\n                        <input onChange={handleChangeVideo} hidden id='video' type=\"file\" accept=\"video/mp4, video/mov, video/avi, video/wmv\" />\n                        <label htmlFor=\"video\" className='btn btn-primary p-2'>\n                            <i className=\"bi bi-cloud-arrow-up-fill\"></i>\n                            Tải video lên\n                        </label>\n                        <div className=\"video-placeholder d-flex justify-content-center mt-5\">\n                            <div className=\"video d-flex flex-column align-item-center\">\n                                {\n                                    isLoadingVideo &&\n                                    <div className=\"video-load d-flex flex-column align-items-center\">\n                                        Đang tải video lên...\n                                        <CircularProgress size={22} />\n                                    </div>\n                                }\n                                {\n                                    formik.values.url !== \"\" &&\n                                    <>\n                                        {\n                                            isYoutubeLink ?\n                                                <iframe src={embedLink}\n                                                    frameBorder='0'\n                                                    allow='autoplay; encrypted-media'\n                                                    allowFullScreen\n                                                    title=\"Media\"\n                                                    style={{ width: '100%', height: '100%' }}\n                                                />\n                                                :\n                                                <video controls>\n                                                    <source src={formik.values.url} />\n                                                </video>\n                                        }\n                                    </>\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            }\n        </div>\n    )\n}","import React from 'react';\nimport './style.scss'\n\ninterface IProps {\n    title: string\n    element?: JSX.Element\n}\n\nfunction TitlePage(props: IProps) {\n    const { title, element } = props;\n    return (\n        <div className='toolbar' id='kt_toolbar'>\n            <div id=\"kt_toolbar_container\" className='container-fluid d-flex flex-stack'>\n                <h1 className='d-flex align-items-center text-dark fw-bolder my-1 fs-3'>\n                    {title}\n                </h1>\n                {element}\n            </div>\n        </div>\n    );\n}\n\nexport default TitlePage;"],"names":["_location$state","prevPriority","useLocation","state","params","useParams","resultLoad","noti","onCloseNoti","useMessage","origin","setOrigin","useState","isLoading","handlePostMedia","usePostMedia","mutate","isPosting","useMutation","mutationFn","body","id","bannerApi","putBanner","postBanner","onSuccess","message","color","onError","errors","_err$request","request","status","formik","useFormik","initialValues","imageURL","name","platform","expires_at","type","htmlTemplate","url","validationSchema","Yup","required","onSubmit","values","origin_id","priority","undefined","data","refetch","isFetching","useQuery","queryKey","QR_KEY","BANNER","queryFn","getDetailById","enabled","_banner$platform","_banner$type","_banner$url","_banner$htmlTemplate","banner","context","setFieldValue","_jsxs","_Fragment","children","_jsx","AppSnack","severity","open","openAlert","close","TitlePage","title","className","autoComplete","handleSubmit","FileUploader","style","width","multiple","handleChange","file","e","target","files","callBack","_data$0$original_url","_data$","console","log","original_url","version","resetOriginalResult","types","FILE_IMG_TYPE","src","IMGS","imgPlaceHolder","alt","LinearProgress","value","onChange","placeholder","touched","FormControl","size","Select","labelId","MenuItem","PLAT_FORM_ARR","map","item","DesktopDatePicker","disablePast","inputFormat","Date","moment","format","renderInput","TextField","BANNERS_TYPE","RenderElement","LoadingButton","marginRight","loading","onClick","variant","_ref","isLoadingVideo","isYoutubeLink","embedLink","testLinkYoutube","BANNER_TYPE","SEARCH_RESULT","WEB","POPUP","DISCOUNT","HTML","ReactQuill","ORGANIZATION","SelectionOrg","organization_id","VIDEO","_data$2","hidden","accept","htmlFor","CircularProgress","frameBorder","allow","allowFullScreen","height","controls","props","element"],"sourceRoot":""}