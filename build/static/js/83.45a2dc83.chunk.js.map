{"version":3,"file":"static/js/83.45a2dc83.chunk.js","mappings":"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","sources":["app/pages/banners/index.tsx","components/TitlePage/index.tsx"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\n// import Draggable from 'react-draggable';\nimport React, { FC, useState } from \"react\";\nimport './style.scss';\nimport { Link, useNavigate } from \"react-router-dom\";\nimport {\n  SortableContainer,\n  SortableContainerProps,\n  SortableElement,\n  SortableElementProps,\n  SortableHandle\n} from \"react-sortable-hoc\";\nimport { arrayMoveImmutable } from \"array-move\";\n// import { useVerifyRoute } from \"app/hooks\";\nimport { useMutation, useQuery, useQueryClient } from \"react-query\";\nimport { QR_KEY } from \"common\";\nimport bannerApi from \"app/api/bannerApi\";\nimport { IBanner } from \"app/interface\";\nimport TitlePage from \"components/TitlePage\";\nimport { KTSVG, toAbsoluteUrl } from \"_metronic/helpers\";\nimport { BannerTypeElement, formatDate } from \"app/util\";\nimport moment from \"moment\";\nimport { Button, CircularProgress } from \"@mui/material\";\nimport { PageCircularProgress } from \"components\";\n\nfunction BannerWidget(props: any) {\n  const navigate = useNavigate()\n  // const { METHOD } = useVerifyRoute()\n  const [banners, setBanners] = useState<IBanner[]>([])\n  useQuery({\n    queryKey: [QR_KEY.BANNER],\n    queryFn: () => bannerApi.banners(),\n    onSuccess(data) {\n      setBanners(data.data)\n    },\n  })\n  const onSortEnd = (oldIndex: number, newIndex: number) => {\n    setBanners(arrayMoveImmutable(banners, oldIndex, newIndex))\n  }\n\n\n  return (\n    <>\n      <TitlePage\n        element={\n          // METHOD?.includes(\"POST\") &&\n          <Button\n            onClick={() => navigate('/pages/banners-form', {\n              state: banners[0]?.priority\n            })}\n            variant=\"contained\"\n            size=\"large\"\n          >\n            Tạo mới banner\n          </Button>\n        }\n        title=\"Danh sách banners\"\n      />\n      <div className=\"row g-5 gx-xxl-8 table-banner\">\n        <div className={`card mb-5 mb-xl-8`}>\n          <div className='card-header border-0 pt-5'>\n            <h3 className='card-title align-items-start flex-column'>\n              <span className='card-label fw-bold fs-3 mb-1'>Banners Campaigns</span>\n              <span className='text-muted mt-1 fw-semobold fs-7'>{banners.length}</span>\n            </h3>\n          </div>\n          {/* end::Header */}\n          {/* begin::Body */}\n          <div className='card-body py-3'>\n            {/* begin::Table container */}\n            <div className='table-responsive'>\n              {/* begin::Table */}\n              <table className='table table-row-dashed table-row-gray-300 align-middle gs-0 gy-4'>\n                {/* begin::Table head */}\n                <thead>\n                  <tr className='fw-bold text-muted'>\n                    <th className='w-25px'>\n                      <div className='form-check form-check-sm form-check-custom form-check-solid'>\n\n                      </div>\n                    </th>\n                    <th className='min-w-150px'>Banner</th>\n                    {/* <th className='min-w-50px'>Độ ưu tiên</th> */}\n                    <th className='min-w-140px'>Loại</th>\n                    <th className='min-w-140px'>Ngày hết hạn</th>\n                    <th className='min-w-140px'>Nền tảng</th>\n                    <th className='min-w-100px text-end'>Actions</th>\n                  </tr>\n                </thead>\n                {/* end::Table head */}\n                {/* begin::Table body */}\n                <SortableComponent\n                  onSortEnd={onSortEnd}\n                  banners={banners}\n                />\n                {/* end::Table body */}\n              </table>\n              {/* end::Table */}\n              <PageCircularProgress loading={banners.length === 0} />\n            </div>\n            {/* end::Table container */}\n          </div>\n        </div>\n      </div>\n      {/* <SortableComponent /> */}\n    </>\n  )\n}\nexport default BannerWidget;\n\ninterface SortableComponentProps {\n  banners: IBanner[]\n  onSortEnd: (oldIndex: number, newIndex: number) => void\n}\n\ninterface ISortableItem extends SortableElementProps {\n  children: React.ReactNode\n  className?: string\n}\ninterface ISortableContainer extends SortableContainerProps {\n  children: React.ReactNode\n  className?: string\n}\n\nconst SortableItem: React.ComponentClass<ISortableItem, any> = SortableElement(\n  ({ children, className }: { children: React.ReactNode; className: string }) => (\n    <tr>{children}</tr>\n  )\n)\ninterface ISortableHandleElement {\n  children: React.ReactNode\n  className?: string\n}\n\nconst SortableList: React.ComponentClass<ISortableContainer, any> = SortableContainer(\n  ({ children, className }: { children: React.ReactNode; className: string }) => {\n    return <tbody>{children}</tbody>\n  }\n)\nconst DndTrigger: React.ComponentClass<ISortableHandleElement, any> = SortableHandle(\n  ({ children, className }: { children: React.ReactNode; className: string }) => (\n    <div className={className || ''}>{children}</div>\n  )\n)\nconst SortableComponent: FC<SortableComponentProps> = ({ banners, onSortEnd }) => {\n  const handleSortEnd = ({ oldIndex, newIndex }: { oldIndex: number; newIndex: number }): void => {\n    onSortEnd(oldIndex, newIndex)\n  }\n  // const { METHOD } = useVerifyRoute()\n  const qrClient = useQueryClient()\n  const { mutate, isLoading } = useMutation({\n    mutationFn: (id: number) => bannerApi.deleteBanner(id),\n    onSuccess: () => {\n      qrClient.invalidateQueries({ queryKey: [QR_KEY.BANNER] })\n    },\n    onError: () => { }\n  })\n  return (\n    <SortableList\n      lockAxis=\"y\"\n      lockToContainerEdges={true}\n      useDragHandle\n      onSortEnd={handleSortEnd}\n\n    >\n      {banners.map((item: IBanner, index: number) => (\n        <SortableItem\n          key={`item-${index}`}\n          index={index} className=\"item\"\n        >\n          <td>\n            {\n              // METHOD?.includes(\"UPDATE\") &&\n              <DndTrigger className=\"itemTrigger\">\n                <img src={toAbsoluteUrl(\"/media/icons/duotune/abstract/abs015.svg\")} alt=\"\" />\n              </DndTrigger>\n            }\n          </td>\n          <td>\n            <div className='d-flex align-items-center'>\n              <div className='symbol symbol-45px me-5'>\n                <img className=\"banner-item__img\" src={item.imageURL} alt='' />\n              </div>\n              <div className='d-flex justify-content-start flex-column'>\n                <span className='text-dark fw-bold text-hover-primary fs-6'>\n                  {item.name}\n                </span>\n                <span className='text-muted fw-semobold text-muted d-block fs-7'>\n                  {formatDate(item.created_at)}\n                </span>\n              </div>\n            </div>\n          </td>\n          {/* <td>\n                        <span className='text-dark fw-bold text-hover-primary fs-6'>\n                            {item.priority}\n                        </span>\n                    </td> */}\n          <td>\n            <BannerTypeElement\n              TYPE={item.type}\n            />\n          </td>\n          <td>\n            <span className='text-dark fw-bold text-hover-primary d-block fs-6'>\n              {item.expires_at ? moment(item.expires_at).format('DD/MM/YYYY') : 'Không thời hạn'}\n            </span>\n          </td>\n          <td>\n            <span className='text-dark fw-bold text-hover-primary d-block fs-6'>\n              Tất cả\n            </span>\n          </td>\n          <td>\n            <div className='d-flex justify-content-end flex-shrink-0'>\n              {\n                // METHOD?.includes(\"UPDATE\") &&\n                <Link\n                  to={{\n                    pathname: `/pages/banners-form/${item.id}`,\n                  }}\n                  className='btn btn-icon btn-bg-light btn-active-color-primary btn-sm me-1'\n                >\n                  <KTSVG path='/media/icons/duotune/art/art005.svg' className='svg-icon-3' />\n                </Link>\n              }\n              <button\n                onClick={() => mutate(item.id)} disabled={isLoading}\n                className='btn btn-icon btn-bg-light btn-active-color-primary btn-sm'\n              >\n                {\n                  isLoading ?\n                    <CircularProgress size={12} />\n                    :\n                    <KTSVG path='/media/icons/duotune/general/gen027.svg' className='svg-icon-3' />\n                }\n              </button>\n            </div>\n          </td>\n        </SortableItem>\n      ))}\n    </SortableList>\n  )\n}\n\n","import React from 'react';\nimport './style.scss'\n\ninterface IProps {\n    title: string\n    element?: JSX.Element\n}\n\nfunction TitlePage(props: IProps) {\n    const { title, element } = props;\n    return (\n        <div className='toolbar' id='kt_toolbar'>\n            <div id=\"kt_toolbar_container\" className='container-fluid d-flex flex-stack'>\n                <h1 className='d-flex align-items-center text-dark fw-bolder my-1 fs-3'>\n                    {title}\n                </h1>\n                {element}\n            </div>\n        </div>\n    );\n}\n\nexport default TitlePage;"],"names":["props","navigate","useNavigate","banners","setBanners","useState","useQuery","queryKey","QR_KEY","BANNER","queryFn","bannerApi","onSuccess","data","_jsxs","_Fragment","children","_jsx","TitlePage","element","Button","onClick","_banners$","state","priority","variant","size","title","className","length","SortableComponent","onSortEnd","oldIndex","newIndex","arrayMoveImmutable","PageCircularProgress","loading","SortableItem","SortableElement","_ref","SortableList","SortableContainer","_ref2","DndTrigger","SortableHandle","_ref3","_ref4","qrClient","useQueryClient","mutate","isLoading","useMutation","mutationFn","id","deleteBanner","invalidateQueries","onError","lockAxis","lockToContainerEdges","useDragHandle","_ref5","map","item","index","src","toAbsoluteUrl","alt","imageURL","name","formatDate","created_at","BannerTypeElement","TYPE","type","expires_at","moment","format","Link","to","pathname","KTSVG","path","disabled","CircularProgress"],"sourceRoot":""}