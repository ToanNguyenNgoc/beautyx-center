{"version":3,"file":"static/js/615.46a18f35.chunk.js","mappings":"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","sources":["app/pages/banners/module/BannerAdd.tsx","components/TitlePage/index.tsx"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport TitlePage from 'components/TitlePage';\nimport { useLocation, useParams } from 'react-router-dom';\nimport '../style.scss';\nimport 'react-quill/dist/quill.snow.css';\nimport { useMutation, useQuery } from 'react-query';\nimport { QR_KEY } from 'common';\nimport { bannerApi } from 'app/api';\nimport { useFormik } from 'formik';\nimport { FileUploader } from 'react-drag-drop-files';\nimport { BANNERS_TYPE, BANNER_TYPE, FILE_IMG_TYPE, testLinkYoutube } from 'app/util';\nimport { IMGS } from '_metronic/assets/imgs/imgs';\nimport { CircularProgress, FormControl, LinearProgress, MenuItem, Select, TextField } from '@mui/material';\nimport { useMessage, usePostMedia } from 'app/hooks';\nimport { PLAT_FORM_ARR } from 'app/util';\nimport { DesktopDatePicker } from '@mui/x-date-pickers';\nimport moment from 'moment';\nimport { ChangeEvent, Dispatch, FC, SetStateAction, useState } from 'react';\nimport ReactQuill from 'react-quill';\nimport { IBanner, IOrganization } from 'app/interface';\nimport { LoadingButton } from '@mui/lab';\nimport * as Yup from \"yup\"\nimport { AxiosError } from 'axios';\nimport { AppSnack, SelectionOrg } from 'components';\n\nfunction BannerAdd() {\n    // useVerifyRoute()\n    const location: any = useLocation()\n    const prevPriority: number = location.state ?? 0\n    const params: any = useParams();\n    const { resultLoad, noti, onCloseNoti } = useMessage()\n    const [origin, setOrigin] = useState<IOrganization>()\n    const { isLoading, handlePostMedia } = usePostMedia()\n    const { mutate, isLoading: isPosting } = useMutation({\n        mutationFn: (body: any) => params.id ? bannerApi.putBanner(params.id, body) : bannerApi.postBanner(body),\n        onSuccess: () => {\n            resultLoad({\n                message: `${params.id ? 'Cập nhật' : 'Tạo mới'} banner thành công`,\n                color: 'success'\n            })\n        },\n        onError: (errors: any) => {\n            const err = errors as AxiosError\n            resultLoad({\n                color: 'error',\n                message: `Có lỗi xảy ra. Mã lỗi ${err?.request?.status}`\n            })\n        }\n    })\n    let formik = useFormik({\n        initialValues: {\n            // priority: \"\",\n            imageURL: \"\",\n            name: \"\",\n            platform: \"\",\n            expires_at: \"\",\n            type: \"\",\n            htmlTemplate: \"\",\n            url: \"\"\n        },\n        validationSchema: Yup.object({\n            imageURL: Yup.string().required(\"Upload hình của banner\"),\n            name: Yup.string().required(\"Nhập tên của Banner\"),\n            // expires_at: Yup.string().required(\"Nhập ngày hết hạn Banner\"),\n            type: Yup.string().required('Chọn loại Banner'),\n        }),\n        onSubmit: (values) => {\n            mutate({\n                ...values,\n                origin_id: origin?.id,\n                priority: params.id ? undefined : prevPriority + 1\n            })\n        }\n    })\n    const { data, refetch, isFetching } = useQuery({\n        queryKey: [QR_KEY.BANNER, params.id],\n        queryFn: () => bannerApi.getDetailById(params.id),\n        enabled: params.id ? true : false,\n        onSuccess: (data) => {\n            const banner = data.context\n            formik.setFieldValue('name', banner.name)\n            formik.setFieldValue('imageURL', banner.imageURL)\n            formik.setFieldValue('platform', banner.platform ?? '')\n            formik.setFieldValue('expires_at', banner.expires_at)\n            formik.setFieldValue('type', banner.type ?? '')\n            formik.setFieldValue('url', banner.url ?? '')\n            formik.setFieldValue('htmlTemplate', banner.htmlTemplate ?? '')\n            // formik.setFieldValue('priority', banner.priority ?? '')\n        },\n    })\n    const handleChangeMedia = (file: File) => {\n        formik.setFieldValue('imageURL', '')\n        const eF: any = {\n            target: {\n                files: [file]\n            }\n        }\n        handlePostMedia({\n            e: eF,\n            callBack(data) {\n                console.log(data)\n                formik.setFieldValue('imageURL', data[0]?.original_url ?? '')\n            },\n            version: 'myspa',\n            resetOriginalResult:true\n        })\n    }\n    return (\n        <>\n            <AppSnack\n                severity={noti.color}\n                message={noti.message}\n                open={noti.openAlert}\n                close={onCloseNoti}\n            />\n            <TitlePage title={params.id ? 'Cập nhật banner' : 'Tạo mới banner'} />\n            <div className='post d-flex flex-column-fluid' id=\"kt_post\">\n                <div className=\"container cus-container\">\n                    <form className='banner-form' autoComplete='off' onSubmit={formik.handleSubmit}>\n                        <div className=\"required form-label\">Banner</div>\n                        <div className=\"drag-banner\">\n                            <FileUploader\n                                className=\"form-input-file\"\n                                style={{ width: '100%' }}\n                                multiple={false}\n                                handleChange={handleChangeMedia}\n                                name=\"file\"\n                                types={FILE_IMG_TYPE}\n                                children={\n                                    <div className='banner-form__img'>\n                                        <img src={formik.values.imageURL === \"\" ? IMGS.imgPlaceHolder : formik.values.imageURL} alt=\"\" className=\"image-value\" />\n                                        {\n                                            isLoading &&\n                                            <div className=\"placeholder\">\n                                                <span>\n                                                    Đang tải lên\n                                                </span>\n                                                <LinearProgress />\n                                            </div>\n                                        }\n                                        {\n                                            formik.values.imageURL === \"\" &&\n                                            <div className=\"placeholder\">\n                                                <span>\n                                                    Kéo thả hình ảnh vào đây hoặc Click để chọn hình ảnh\n                                                </span>\n                                            </div>\n                                        }\n                                    </div>\n                                }\n                            />\n                        </div>\n                        <input\n                            value={formik.values.imageURL}\n                            onChange={formik.handleChange}\n                            type=\"text\"\n                            name=\"imageURL\"\n                            className=\"form-control form-control-solid mt-4 mb-4\"\n                            placeholder=\"Hoặc link hình ảnh....\"\n                        />\n                        {formik.errors.imageURL && formik.touched.imageURL && (\n                            <span className='text-danger'>\n                                {formik.errors.imageURL}\n                            </span>\n                        )}\n                        <div className=\"input-form\">\n                            <div className=\"input-form__wrap\">\n                                <label className=\"required form-label\">\n                                    Tên Banners\n                                </label>\n                                <input\n                                    value={formik.values.name}\n                                    onChange={formik.handleChange}\n                                    type=\"text\"\n                                    name=\"name\"\n                                    className=\"form-control form-control-solid\"\n                                    placeholder=\"Tên Banner\"\n                                />\n                                {formik.errors.name && formik.touched.name && (\n                                    <span className='text-danger'>\n                                        {formik.errors.name}\n                                    </span>\n                                )}\n                            </div>\n                            <div className=\"row mt-8\">\n                                <div className=\"col\">\n                                    <label className=\"filter-row_label\">Nền tảng</label>\n                                    <FormControl size=\"small\">\n                                        <Select\n                                            labelId=\"demo-simple-select-label\"\n                                            id=\"demo-simple-select\"\n                                            value={formik.values.platform}\n                                            onChange={(e) => formik.setFieldValue('platform', e.target.value)}\n                                        >\n                                            <MenuItem value=\"\">\n                                                <em>Tất cả</em>\n                                            </MenuItem>\n                                            {\n                                                PLAT_FORM_ARR.map(item => (\n                                                    <MenuItem key={item} value={item}>{item}</MenuItem>\n                                                ))\n                                            }\n                                        </Select>\n                                    </FormControl>\n                                </div>\n                                <div className=\"col\">\n                                    <label className=\"filter-row_label\">Ngày hết hạn</label>\n                                    <DesktopDatePicker\n                                        disablePast={true}\n                                        inputFormat=\"dd/MM/yyyy\"\n                                        value={formik.values.expires_at && new Date(formik.values.expires_at)}\n                                        onChange={(e) => formik.setFieldValue('expires_at', moment(e).format('YYYY-MM-DD HH:mm:ss'))}\n                                        renderInput={(params: any) => <TextField {...params} />}\n                                    />\n                                    {formik.errors.expires_at && formik.touched.expires_at && (\n                                        <span className='text-danger'>\n                                            {formik.errors.expires_at}\n                                        </span>\n                                    )}\n                                </div>\n                                <div className=\"col\">\n                                    <label className=\"filter-row_label\">Loại banner cho</label>\n                                    <FormControl size=\"small\">\n                                        <Select\n                                            labelId=\"demo-simple-select-label\"\n                                            id=\"demo-simple-select\"\n                                            value={formik.values.type}\n                                            onChange={(e) => formik.setFieldValue('type', e.target.value)}\n                                        >\n                                            {\n                                                BANNERS_TYPE.map(item => (\n                                                    <MenuItem key={item.type} value={item.type}>{item.title}</MenuItem>\n                                                ))\n                                            }\n                                        </Select>\n                                    </FormControl>\n                                    {formik.errors.type && formik.touched.type && (\n                                        <span className='text-danger'>\n                                            {formik.errors.type}\n                                        </span>\n                                    )}\n                                </div>\n                            </div>\n                            <RenderElement formik={formik} origin={origin} setOrigin={setOrigin} banner={data?.context} />\n                        </div>\n                        <div className=\"d-flex justify-content-end mt-6\">\n                            {\n                                params.id &&\n                                <LoadingButton\n                                    style={{ marginRight: '8px' }}\n                                    loading={isFetching}\n                                    onClick={() => refetch()}\n                                    size='large' color='primary' type='button' variant='contained'\n                                >\n                                    Khôi phục\n                                </LoadingButton>\n                            }\n                            <LoadingButton loading={isPosting} size='large' color='success' type='submit' variant='contained' >\n                                {params.id ? 'Lưu thay đổi' : 'Tạo mới banner'}\n                            </LoadingButton>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default BannerAdd;\ninterface RenderElementProps {\n    formik: any,\n    origin: IOrganization | undefined\n    setOrigin: Dispatch<SetStateAction<IOrganization | undefined>>\n    banner: IBanner | undefined\n}\nconst RenderElement: FC<RenderElementProps> = ({ formik, origin, setOrigin, banner }) => {\n    const type = formik.values.type\n    //[handle type === \"VIDEO\"]\n    const { isLoading: isLoadingVideo, handlePostMedia } = usePostMedia()\n    const handleChangeVideo = (e: ChangeEvent<HTMLInputElement>) => {\n        formik.setFieldValue('url', '')\n        handlePostMedia({\n            e,\n            callBack(data) {\n                formik.setFieldValue('url', data[0]?.original_url)\n            },\n            version: 'api.beautyx'\n        })\n    }\n    const { isYoutubeLink, embedLink } = testLinkYoutube(formik.values.url)\n\n    return (\n        <div className='mt-8'>\n            {\n                (type === BANNER_TYPE.SEARCH_RESULT || type === BANNER_TYPE.WEB || type === BANNER_TYPE.POPUP || type === BANNER_TYPE.DISCOUNT) &&\n                <div className=\"col\">\n                    <label className=\"filter-row_label\">Đường dẫn</label>\n                    <input\n                        name='url' onChange={formik.handleChange}\n                        type=\"text\" className=\"form-control form-control-solid\"\n                        value={formik.values.url}\n                        placeholder='Đường dẫn URL...'\n                    />\n                </div>\n            }\n            {\n                (type === BANNER_TYPE.HTML) &&\n                <div className=\"col\">\n                    <label className=\"filter-row_label\">Nhập content</label>\n                    <ReactQuill value={formik.values.htmlTemplate} onChange={(e) => formik.setFieldValue('htmlTemplate', e)} />\n                </div>\n            }\n            {\n                type === BANNER_TYPE.ORGANIZATION &&\n                <SelectionOrg\n                    organization_id={banner?.origin_id}\n                    origin={origin}\n                    setOrigin={setOrigin}\n                />\n            }\n            {\n                type === BANNER_TYPE.VIDEO &&\n                <div className=\"col col-video\">\n                    <label className=\"filter-row_label\">Upload video</label>\n                    <div className=\"drag-video\">\n                        <input\n                            name=\"url\"\n                            onChange={formik.handleChange}\n                            value={formik.values.url}\n                            type=\"text\" placeholder='Hoặc link video'\n                            className=\"form-control form-control-solid\"\n                        />\n                        <input onChange={handleChangeVideo} hidden id='video' type=\"file\" accept=\"video/mp4, video/mov, video/avi, video/wmv\" />\n                        <label htmlFor=\"video\" className='btn btn-primary p-2'>\n                            <i className=\"bi bi-cloud-arrow-up-fill\"></i>\n                            Tải video lên\n                        </label>\n                        <div className=\"video-placeholder d-flex justify-content-center mt-5\">\n                            <div className=\"video d-flex flex-column align-item-center\">\n                                {\n                                    isLoadingVideo &&\n                                    <div className=\"video-load d-flex flex-column align-items-center\">\n                                        Đang tải video lên...\n                                        <CircularProgress size={22} />\n                                    </div>\n                                }\n                                {\n                                    formik.values.url !== \"\" &&\n                                    <>\n                                        {\n                                            isYoutubeLink ?\n                                                <iframe src={embedLink}\n                                                    frameBorder='0'\n                                                    allow='autoplay; encrypted-media'\n                                                    allowFullScreen\n                                                    title=\"Media\"\n                                                    style={{ width: '100%', height: '100%' }}\n                                                />\n                                                :\n                                                <video controls>\n                                                    <source src={formik.values.url} />\n                                                </video>\n                                        }\n                                    </>\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            }\n        </div>\n    )\n}","import React from 'react';\nimport './style.scss'\n\ninterface IProps {\n    title: string\n    element?: JSX.Element\n}\n\nfunction TitlePage(props: IProps) {\n    const { title, element } = props;\n    return (\n        <div className='toolbar' id='kt_toolbar'>\n            <div id=\"kt_toolbar_container\" className='container-fluid d-flex flex-stack'>\n                <h1 className='d-flex align-items-center text-dark fw-bolder my-1 fs-3'>\n                    {title}\n                </h1>\n                {element}\n            </div>\n        </div>\n    );\n}\n\nexport default TitlePage;"],"names":["prevPriority","useLocation","state","params","useParams","useMessage","resultLoad","noti","onCloseNoti","useState","origin","setOrigin","usePostMedia","isLoading","handlePostMedia","useMutation","mutationFn","body","id","bannerApi","onSuccess","message","color","onError","errors","request","status","mutate","isPosting","formik","useFormik","initialValues","imageURL","name","platform","expires_at","type","htmlTemplate","url","validationSchema","Yup","required","onSubmit","values","origin_id","priority","undefined","useQuery","queryKey","QR_KEY","queryFn","enabled","data","banner","context","setFieldValue","refetch","isFetching","severity","open","openAlert","close","title","className","autoComplete","handleSubmit","style","width","multiple","handleChange","file","e","target","files","callBack","console","log","original_url","version","resetOriginalResult","types","FILE_IMG_TYPE","children","src","IMGS","alt","value","onChange","placeholder","touched","size","labelId","PLAT_FORM_ARR","item","disablePast","inputFormat","Date","moment","format","renderInput","BANNERS_TYPE","RenderElement","marginRight","loading","onClick","variant","isLoadingVideo","testLinkYoutube","isYoutubeLink","embedLink","BANNER_TYPE","organization_id","hidden","accept","htmlFor","frameBorder","allow","allowFullScreen","height","controls","props","element"],"sourceRoot":""}